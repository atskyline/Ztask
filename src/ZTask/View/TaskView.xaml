<Window x:Class="ZTask.View.TaskWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:ignore="http://www.ignore.com"
        xmlns:converter="clr-namespace:ZTask.View.Converter"
        xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
        mc:Ignorable="d ignore"
        WindowStyle="None"
        AllowsTransparency="True"
        ResizeMode="CanResizeWithGrip" 
        Height="300"
        Width="200"
        MinHeight="200"
        MinWidth="200"
        ShowInTaskbar="False"
        Activated="OnWindowActivited"
        Deactivated="OnWindowDeactivated"
        MouseLeftButtonDown="WindowDragMove" 
        Loaded="OnWindowLoaded"
        Closed="OnWindowClosed"
        Background="{Binding Background}"
        DataContext="{Binding TaskViewModel, Source={StaticResource Locator}}">
    <Window.Resources>
        <converter:Object2VisibilityConverter x:Key="Object2VisibilityConverter"/>
        <converter:HideCompletedTaskConverter x:Key="HideCompletedTaskConverter"/>
        <LinearGradientBrush x:Key="MouseOverBrush" StartPoint="0,0" EndPoint="0,1">
            <GradientBrush.GradientStops>
                <GradientStopCollection>
                    <GradientStop Color="#FF47BBFD" Offset="1.0"/>
                </GradientStopCollection>
            </GradientBrush.GradientStops>
        </LinearGradientBrush>
        <LinearGradientBrush x:Key="PressedBrush" StartPoint="0,0" EndPoint="0,1">
            <GradientBrush.GradientStops>
                <GradientStopCollection>
                    <GradientStop Color="#FF477FFD" Offset="1.0"/>
                </GradientStopCollection>
            </GradientBrush.GradientStops>
        </LinearGradientBrush>
        <Style x:Key="ImageButton" TargetType="{x:Type Button}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border x:Name="Border" BorderThickness="0">
                            <ContentPresenter Margin="2" HorizontalAlignment="Center" VerticalAlignment="Center" RecognizesAccessKey="True"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter TargetName="Border" Property="Background" Value="{StaticResource MouseOverBrush}" />
                            </Trigger>
                            <Trigger Property="IsPressed" Value="true">
                                <Setter TargetName="Border" Property="Background" Value="{StaticResource PressedBrush}" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
    </Window.Resources>
    <DockPanel>
        <DockPanel DockPanel.Dock="Top">
            <Label DockPanel.Dock="Left" 
                   Margin="2,2,2,0"
                   Content="{Binding TaskList.Title}" Foreground="{Binding TextForeground}" FontSize="16"/>
            <StackPanel DockPanel.Dock="Right"  Orientation="Horizontal" HorizontalAlignment="Right">
                <ToggleButton x:Name="IsShowCompletedButton" Background="Transparent" BorderThickness="0" 
                              IsChecked="{Binding IsShowCompleted,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}">
                    <ToggleButton.Template>
                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                            <Border x:Name="Border" BorderThickness="0">
                                <ContentPresenter Margin="2" HorizontalAlignment="Center" VerticalAlignment="Center" RecognizesAccessKey="True"/>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsChecked" Value="True">
                                    <Setter Property="Content">
                                        <Setter.Value>
                                            <Image Width="32" Height="32" Source="..\Images\Checked.png" />
                                        </Setter.Value>
                                    </Setter>
                                </Trigger>
                                <Trigger Property="IsChecked" Value="False">
                                    <Setter Property="Content">
                                        <Setter.Value>
                                            <Image Width="32" Height="32" Source="..\Images\Unchecked.png" />
                                        </Setter.Value>
                                    </Setter>
                                </Trigger>
                                <Trigger Property="IsMouseOver" Value="true">
                                    <Setter TargetName="Border" Property="Background" Value="{StaticResource MouseOverBrush}" />
                                </Trigger>
                                <Trigger Property="IsPressed" Value="true">
                                    <Setter TargetName="Border" Property="Background" Value="{StaticResource PressedBrush}" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </ToggleButton.Template>
                </ToggleButton>
                <Button Style="{StaticResource ImageButton}" Background="Transparent" BorderThickness="0"
                        Command="{Binding AddTaskCommand}">
                    <Image Width="32" Height="32"  Source="..\Images\Add.png"></Image>
                </Button>
                <Button Style="{StaticResource ImageButton}" Background="Transparent" BorderThickness="0"
                        Command="{Binding DeleteTaskCommand}"
                        CommandParameter="{Binding SelectedItem, ElementName=ListBox}"
                        Visibility="{Binding SelectedItem, ElementName=ListBox, Converter={StaticResource Object2VisibilityConverter}}">
                    <Image Width="32" Height="32"  Source="..\Images\Delete.png"></Image>
                </Button>
                <Button Style="{StaticResource ImageButton}" Background="Transparent" BorderThickness="0"
                        Command="{Binding CloseWindowCommand}">
                    <Image Width="32" Height="32"  Source="..\Images\Close.png"></Image>
                </Button>
            </StackPanel>
        </DockPanel>

        <ListBox 
            x:Name="ListBox"
            ItemsSource="{Binding Tasks}" 
            Background="Transparent"
            BorderThickness="0,1,0,0"
            ScrollViewer.HorizontalScrollBarVisibility="Disabled"
            HorizontalContentAlignment="Stretch">
            <ListBox.ItemContainerStyle>
                <Style TargetType="{x:Type ListBoxItem}">
                    <Style.Triggers>
                        <DataTrigger Value="True">
                            <DataTrigger.Binding>
                                <MultiBinding Converter="{StaticResource HideCompletedTaskConverter}">
                                    <Binding Path="IsCompleted" />
                                    <Binding Path="DataContext.IsShowCompleted"
                                             UpdateSourceTrigger="PropertyChanged"
                                             RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}" />
                                </MultiBinding>
                            </DataTrigger.Binding>
                            <Setter Property="Visibility" Value="Collapsed"/>
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </ListBox.ItemContainerStyle>
            <ListBox.ItemTemplate>
                <DataTemplate>
                    <Grid GotFocus="OnItemGotFocus" Margin="0,2">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <CheckBox Grid.Column="0" VerticalAlignment="Center"
                                  IsChecked="{Binding IsCompleted}" 
                                  Unchecked="OnItemCheckChanged"
                                  Checked="OnItemCheckChanged"/>
                        <TextBox Grid.Column="1" BorderThickness="0"
                                 Text="{Binding Title, Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" 
                                 TextChanged="OnItemTextBoxChanged"
                                 LostFocus="OnItemTextBoxLostFocus"
                                 TextWrapping="Wrap"
                                 Foreground="{Binding DataContext.TextForeground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"
                                 Background="Transparent"/>
                    </Grid>
                </DataTemplate>
            </ListBox.ItemTemplate>
        </ListBox>
    </DockPanel>
</Window>
